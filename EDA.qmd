---
title: "Diabetes EDA"
author: "Robert Berini"
format: html
editor: visual
execute: 
  warning: false
  message: false
---

## Introduction and overview

This project considers the Diabetes Health Indicators data set. The data is drawn from a 2015 Behavioral Risk Factor Surveillance System (BRFSS) survey conducted by the Centers for Disease Control and Prevention (CDC).

This investigation and analysis considers whether answers to these survey questions might prove useful in predicting a diabetes diagnosis, and, if so, which subset of potential predictors should be considered in modeling.

There are 253,680 obervations in the data set and 21 potential predictors.

Additional information on the data set and survey can be found via the links below:

[Diabetes Dataset](https://www.kaggle.com/datasets/alexteboul/diabetes-health-indicators-dataset/?select=diabetes_binary_health_indicators_BRFSS2015.csv "Diabetes Dataset")

[Codebook for Variables](https://www.cdc.gov/brfss/annual_data/2015/pdf/CODEBOOK15_LLCP.pdf "Codebook")

### About the variables

Variables in the data set include:

**Diabetes**: whether the individual received a diabetes (or prediabetes) diagnosis ("Yes" or "No") *this is the repsonse variable*

**HighBP**: whether or not the individual had ever been diagnosed with high blood pressure ("Yes" or "No")

**HighChol**: whether or not the individual had ever been diagnosed with high cholesterol ("Yes" or "No")

**CholCheck**: whether or not the individual had cholesterol levels checked within the past five years ("Yes" or "No")

**BMI**: body mass index of the individual (numeric value)

**Smoker**: whether or not the individual had smoked at least 100 cigarettes over entire life ("Yes" or "No")

**Stroke**: whether or not the individual had ever had a stroke ("Yes" or "No")

**HeartDiseaseorAttack**: whether or not the individual had ever had coronary heart disease or myocardial infarction ("Yes" or "No")

**PhysActivity**: whether or not the individual had been physically active in the prior 30 days ("Yes" or "No")

**Fruits**: whether or not the individual had consumed fruit one or more times per day in the prior 30 days ("Yes" or "No")

**Veggies**: whether or not the individual had consumed vegetables one or more times per day in the prior 30 days ("Yes" or "No")

**HvyAlcoholConsump**: whether or not the individual would be considered a heavy drinker based upon reported alcohol consumption behaviors over the prior 30 days ("Yes" or "No")

**AnyHealthcare**: whether or not the individual had any form of healthcare coverage ("Yes" or "No")

**NoDocbcCost**: whether or not the individual had at any time during the prior 12 months needed to see a doctor but could not because of cost ("Yes" or "No")

**GenHlth**: the individual's self-assessment of his or her general health (from 1 for excellent to 5 for poor)

**MentHlth**: days of poor mental health over the prior 30 days (numeric value)

**PhysHlth**: days of physical illness or injury over the prior 30 days (numeric value)

**DiffWalk**: whether or not the individual faced serious difficulty walking or climbing stairs ("Yes" or "No")

**Sex**: indicated sex of respondent ("Female" or "Male"

**Age**: indicated age group of respondent ("18 to 24", "25 to 29", "30 to 34", "35 to 39", "40 to 44", "45 to 49", "50 to 54", "55 to 59", "60 to 64", "65 to 69", "70 to 74", "75 to 79", "80 or older")

**Education**: indicated highest grade or year of school completed ("No school or only kindergarten", "Elementary", "Some high school", "High school graduate", "Some college or technical school", "College graduate")

**Income**: indicated household income group ("Less than \$10,000", "\$10,000 to less than \$15,000", "\$15,000 to less than \$20,000", "\$20,000 to less than \$25,000", "\$25,000 to less than \$35,000", "\$35,000 to less than \$50,000", "\$50,000 to less than \$75,000", "\$75,000 or more")

## Load required packages

```{r}
library(conflicted)
library(skimr)
library(psych)
library(tidyverse)
library(janitor)
library(ggmosaic)
library(knitr)

conflicts_prefer(dplyr::lag)
conflicts_prefer(dplyr::filter)

options(scipen = 999, digits = 2)
```

## Read data

Read in data from the Kaggle source indicated in introduction.

```{r}
diabetes_raw <- read_csv("data/diabetes_binary_health_indicators_BRFSS2015.csv")
```

## Check and manipulate the data

Explore columns names, column types, and values.

```{r}
glimpse(diabetes_raw)
```

Check for any missing values. None are found.

```{r}
diabetes_raw |>
  skim() |>
  focus(n_missing, complete_rate, numeric.hist)
```

Assign a named vector for the numeric variables as described in the introduction: `BMI`, `MentHlth`, and `PhysHlth`. Consistent with social science research practices, treat `GenHlth` Likert-scale question as interval data (although technically ordinal), and, as such, include among the numeric variables. Assign a named vector for the multilevel factors as described in the introduction: `Age`, `Education`, and `Income`.

```{r}
true_numeric_cols <- c("BMI", "GenHlth", "MentHlth", "PhysHlth")
multi_fac_cols <- c("Age", "Education", "Income")
```

Rename the `Diabetes_binary` variable to `Diabetes` for simplicity. Create factors for binary variables: `Sex` and all the "Yes"/"No" variables described in the introduction.

```{r}
diabetes <-
  diabetes_raw |>
  rename(Diabetes = Diabetes_binary) |>
  mutate(Sex = factor(Sex, levels = 0:1, labels = c("Female", "Male"))) |>
  mutate(across(
    .cols = !c(Sex, all_of(true_numeric_cols), all_of(multi_fac_cols)),
    .fns = ~ factor(.x, levels = 0:1, labels = c("No", "Yes"))
  )) |>
  mutate(across(where(is.factor), fct_rev)) #so modeling correctly reflects positive class
```

Create ordered factors for multilevel variables: `Age`, `Education`, and `Income`.

```{r}
diabetes <-
  diabetes |>
  mutate(Age = factor(Age, 
                      levels = 1:13, 
                      labels = c("18 to 24", "25 to 29", "30 to 34", 
                                 "35 to 39", "40 to 44", "45 to 49", 
                                 "50 to 54", "55 to 59", "60 to 64", 
                                 "65 to 69", "70 to 74", "75 to 79", 
                                 "80 or older"),
                      ordered = T)) |>
  mutate(Education = factor(Education, 
                            levels = 1:6, 
                            labels = c("No school or only kindergarten", 
                                       "Elementary", 
                                       "Some high school", 
                                       "High school graduate", 
                                       "Some college or technical school", 
                                       "College graduate"),
                            ordered = T)) |>
  mutate(Income = factor(Income, 
                         levels = 1:8, 
                         labels = c("Less than $10,000", 
                                    "$10,000 to less than $15,000", 
                                    "$15,000 to less than $20,000", 
                                    "$20,000 to less than $25,000", 
                                    "$25,000 to less than $35,000", 
                                    "$35,000 to less than $50,000", 
                                    "$50,000 to less than $75,000", 
                                    "$75,000 or more"),
                         ordered = T))
```

Confirm changes to variable types.

```{r}
glimpse(diabetes)
```

Generate basic summary statistics for numeric columns.

```{r}
diabetes |>
  select(where(is.numeric)) |>
  describe()
```

Check unique values for the categorical variables.

```{r}
diabetes |>
  select(where(is.factor)) |>
  summary(maxsum = Inf)
```

Save manipulated data set for use in modeling phase.

```{r}
saveRDS(diabetes, "data/diabetes.rds")
save(diabetes, file = "data/diabetes.RData")
```

In Exploratory Data Analysis and Modeling, the following variables are excluded from consideration based upon early stage modeling which revealed them to have lower variable importance in many decision tree models: `CholCheck`, `Smoker`, `Stroke`, `PhysActivity`, `Fruits`, `Veggies`, `HvyAlcoholConsump`, `AnyHealthcare`, `NoDocbcCost`, `DiffWalk`, and `Education`. To retain the integrity of the full data set, these variables are not removed in the saved data set. Instead, `step_rm` is used during recipe definition in the Modeling phase to exclude these variables.

## EDA

Determine frequency of diabetes diagnoses across the data set.

```{r}
diabetes |>
  ggplot(aes(x = Diabetes)) +
  geom_bar(aes(fill = Diabetes)) +
  theme(legend.position='none') +
  scale_fill_manual(values = c("Yes"="#F51304","No"="#2D8AEB"))
```

Determine the percentage of diabetes diagnoses across the data set.

```{r}
diabetes |>
  tabyl(Diabetes) |>
  adorn_totals("row") |>
  adorn_pct_formatting()
```

The positive class (i.e., "Yes" on `Diabetes`) appears in less than 14% of cases. This suggests we may wish to consider stratification in the train-test split and cross-validation folds.

Explore the percentage of diabetes diagnoses relative to the sex of the respondent.

```{r}
diabetes |>
  tabyl(Sex, Diabetes) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_title()
```

The relative occurrence of diabetes diagnosis does not appear to differ drastically based on sex.

Explore the percentage of diabetes diagnoses relative to whether or not the respondent had ever been diagnosed with high blood pressure

```{r}
diabetes |>
  tabyl(HighBP, Diabetes) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_title()
```

```{r}
diabetes |>
  tabyl(HighChol, Diabetes) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_title()
```

Check how correlated the numeric variables are with one another.

```{r}
diabetes |>
  select(where(is.numeric)) |>
  cor()
```

For most combinations, there appears to be only weak correlation. The highest is `GenHlth` with `PhysHlth`, but this is still only a medium-strength correlation. This suggests we would not be particularly concerned with multicollinearity across these numeric variables.

Get summary statistics grouped by diabetes diagnosis.

```{r}
diabetes |>
  group_by(Diabetes) |>
  summarise(across(where(is.numeric),
                   list("median" = median, "mean" = mean, "stdev" = sd),
                   .names = "{.fn}_{.col}"))|>
  mutate(across(where(is.numeric), round, 2)) |>
  kable()
```

```{r}
diabetes |>
  ggplot(aes(Diabetes, BMI)) +
  geom_violin(aes(fill = Diabetes)) +
  stat_summary(fun = "mean",
               geom = "crossbar", 
               width = 0.5,
               size = 0.2,
               colour = "white") +
  theme(legend.position = "none") +
  xlab("Diabetes") +
  ylab("BMI") +
  ggtitle("Distribution of Diabetes Diagnosis by BMI") +
  scale_fill_manual(values = c("Yes"="#F51304","No"="#2D8AEB"))
```

```{r}
diabetes |>
  ggplot(aes(PhysHlth)) +
  geom_density() +
  theme(legend.position = "none") +
  xlab("Physical Health") +
  ggtitle("Distribution of Diabetes Diagnosis by Physical Health") +
  facet_wrap(~ Diabetes)
```

```{r}
diabetes |>
  ggplot(aes(MentHlth)) +
  geom_density() +
  theme(legend.position = "none") +
  xlab("Mental Health") +
  ggtitle("Distribution of Diabetes Diagnosis by Mental Health") +
  facet_wrap(~ Diabetes)
```

```{r}
diabetes |>
  ggplot(aes(GenHlth)) +
  geom_histogram(bins = 5, aes(fill = Diabetes)) +
  xlab("General Health") +
  ggtitle("Distribution of Diabetes Diagnosis by General Health") +
  scale_fill_manual(values = c("Yes"="#F51304","No"="#2D8AEB"))
```

```{r}
diabetes |>
  ggplot() +
  geom_mosaic(aes(x = product(Age), fill = Diabetes)) +
  theme(legend.position = "none") +
  xlab("Age Group") +
  ylab("Diabetes") +
  ggtitle("Prevalence of Diabetes Diagnosis by Age Group") +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
  scale_fill_manual(values = c("Yes"="#F51304","No"="#2D8AEB"))
```

```{r}
diabetes |>
  ggplot() +
  geom_mosaic(aes(x = product(Income), fill = Diabetes)) +
  theme(legend.position = "none") +
  xlab("Income Range") +
  ylab("Diabetes") +
  ggtitle("Prevalence of Diabetes Diagnosis by Income Range") +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
  scale_fill_manual(values = c("Yes"="#F51304","No"="#2D8AEB"))
```

## Modeling

For Modeling results, go here: [Modeling](Modeling.html)

*The story continues...*
