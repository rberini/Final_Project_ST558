---
title: "Diabetes EDA"
author: "Robert Berini"
format: html
editor: visual
execute: 
  warning: false
  message: false
---

## Load required packages

```{r}
library(conflicted)
library(skimr)
library(psych)
library(tidyverse)
library(janitor)
library(ggmosaic)
library(knitr)

conflicts_prefer(dplyr::lag)
conflicts_prefer(dplyr::filter)

options(scipen = 999, digits = 2)
```

## Read data

```{r}
diabetes_raw <- read_csv("data/diabetes_binary_health_indicators_BRFSS2015.csv")
```

## Check and manipulate the data

Explore columns names, column types, and values.

```{r}
glimpse(diabetes_raw)
```

Check for any missing values.

```{r}
diabetes_raw |>
  skim() |>
  focus(n_missing, complete_rate, numeric.hist)
```

Reassign column types.

```{r}
#consistent with social science practices, treating GenHlth Likert scale as an interval scale
true_numeric_cols <- c("BMI", "GenHlth", "MentHlth", "PhysHlth")
multi_fac_cols <- c("Age", "Education", "Income")
```

Create factors for binary variables.

```{r}
diabetes <-
  diabetes_raw |>
  rename(Diabetes = Diabetes_binary) |>
  mutate(Sex = factor(Sex, levels = 0:1, labels = c("Female", "Male"))) |>
  mutate(across(
    .cols = !c(Sex, all_of(true_numeric_cols), all_of(multi_fac_cols)),
    .fns = ~ factor(.x, levels = 0:1, labels = c("No", "Yes"))
  )) |>
  mutate(across(where(is.factor), fct_rev)) #so modeling correctly reflects positive class
```

Create factors for multi-level variables.

```{r}
diabetes <-
  diabetes |>
  mutate(Age = factor(Age, 
                      levels = 1:13, 
                      labels = c("18 to 24", "25 to 29", "30 to 34", 
                                 "35 to 39", "40 to 44", "45 to 49", 
                                 "50 to 54", "55 to 59", "60 to 64", 
                                 "65 to 69", "70 to 74", "75 to 79", 
                                 "80 or older"),
                      ordered = T)) |>
  mutate(Education = factor(Education, 
                            levels = 1:6, 
                            labels = c("No school or only kindergarten", 
                                       "Elementary", 
                                       "Some high school", 
                                       "High school graduate", 
                                       "Some college or technical school", 
                                       "College graduate"),
                            ordered = T)) |>
  mutate(Income = factor(Income, 
                         levels = 1:8, 
                         labels = c("Less than $10,000", 
                                    "$10,000 to less than $15,000", 
                                    "$15,000 to less than $20,000", 
                                    "$20,000 to less than $25,000", 
                                    "$25,000 to less than $35,000", 
                                    "$35,000 to less than $50,000", 
                                    "$50,000 to less than $75,000", 
                                    "$75,000 or more"),
                         ordered = T))
```

```{r}
glimpse(diabetes)
```

Generate basic summary statistics for numeric columns and check the unique values for the categorical variables.

```{r}
diabetes |>
  select(where(is.numeric)) |>
  describe()
```

```{r}
diabetes |>
  select(where(is.factor)) |>
  summary(maxsum = Inf)
```

Save manipulated data set.

```{r}
saveRDS(diabetes, "data/diabetes.rds")
save(diabetes, file = "data/diabetes.RData")
```

## EDA

Frequency of diabetes diagnosis across the data set.

```{r}
diabetes |>
  ggplot(aes(x = Diabetes)) +
  geom_bar(aes(fill = Diabetes)) +
  theme(legend.position='none') +
  scale_fill_manual(values = c("Yes"="#F51304","No"="#2D8AEB"))
```

Percentage of diabetes diagnosis across the data set.

```{r}
diabetes |>
  tabyl(Diabetes) |>
  adorn_totals("row") |>
  adorn_pct_formatting()
```

```{r}
diabetes |>
  tabyl(Sex, Diabetes) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_title()
```

```{r}
diabetes |>
  tabyl(HighBP, Diabetes) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_title()
```

```{r}
diabetes |>
  tabyl(HighChol, Diabetes) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_title()
```

Check how correlated the numeric variables are with one another.

```{r}
diabetes |>
  select(where(is.numeric)) |>
  cor()
```

Get summary statistics grouped by diabetes diagnosis.

```{r}
diabetes |>
  group_by(Diabetes) |>
  summarise(across(where(is.numeric),
                   list("median" = median, "mean" = mean, "stdev" = sd),
                   .names = "{.fn}_{.col}"))|>
  mutate(across(where(is.numeric), round, 2)) |>
  kable()
```

```{r}
diabetes |>
  ggplot(aes(Diabetes, BMI)) +
  geom_violin(aes(fill = Diabetes)) +
  stat_summary(fun = "mean",
               geom = "crossbar", 
               width = 0.5,
               size = 0.2,
               colour = "white") +
  theme(legend.position = "none") +
  xlab("Diabetes") +
  ylab("BMI") +
  ggtitle("Distribution of Diabetes Diagnosis by BMI") +
  scale_fill_manual(values = c("Yes"="#F51304","No"="#2D8AEB"))
```

```{r}
diabetes |>
  ggplot(aes(PhysHlth)) +
  geom_density() +
  theme(legend.position = "none") +
  xlab("Physical Health") +
  ggtitle("Distribution of Diabetes Diagnosis by Physical Health") +
  facet_wrap(~ Diabetes)
```

```{r}
diabetes |>
  ggplot(aes(MentHlth)) +
  geom_density() +
  theme(legend.position = "none") +
  xlab("Mental Health") +
  ggtitle("Distribution of Diabetes Diagnosis by Mental Health") +
  facet_wrap(~ Diabetes)
```

```{r}
diabetes |>
  ggplot(aes(GenHlth)) +
  geom_histogram(bins = 5, aes(fill = Diabetes), alpha = 0.5) +
  xlab("General Health") +
  ggtitle("Distribution of Diabetes Diagnosis by General Health") +
  scale_fill_manual(values = c("Yes"="#F51304","No"="#2D8AEB"))
```

```{r}
diabetes |>
  ggplot() +
  geom_mosaic(aes(x = product(Age), fill = Diabetes)) +
  theme(legend.position = "none") +
  xlab("Age Group") +
  ylab("Diabetes") +
  ggtitle("Prevalence of Diabetes Diagnosis by Age Group") +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
  scale_fill_manual(values = c("Yes"="#F51304","No"="#2D8AEB"))
```

```{r}
diabetes |>
  ggplot() +
  geom_mosaic(aes(x = product(Income), fill = Diabetes)) +
  theme(legend.position = "none") +
  xlab("Income Range") +
  ylab("Diabetes") +
  ggtitle("Prevalence of Diabetes Diagnosis by Income Range") +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
  scale_fill_manual(values = c("Yes"="#F51304","No"="#2D8AEB"))
```

## Modeling

For Modeling results, go here: [Modeling](Modeling.html)

*The story continues...*
